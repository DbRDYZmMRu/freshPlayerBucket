name: Scan Audio, Cover, and JSON Folders

on:
  workflow_dispatch:
    inputs:
      commit_message:
        description: 'Commit message for scanning audio, cover, and json folders'
        required: false
        default: 'Scan audio, cover, and json subfolders 1 to 16, record contents and missing files'

jobs:
  scan_folders:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # Step 1: Checkout the Repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: main

      # Step 2: Debug Root Folders Contents
      - name: List Root Folders Contents
        run: |
          echo "Listing contents of audio, cover, and json folders:"
          for root in audio cover json; do
            echo "Contents of $root:"
            ls -laR "$root" 2>/dev/null || echo "$root folder is empty or does not exist."
            echo "Subfolders in $root:"
            ls -lad "$root"/*/ 2>/dev/null || echo "No subfolders found in $root."
            echo "Files in $root subfolders (all extensions):"
            find "$root" -type f -maxdepth 2 2>/dev/null || echo "No files found in $root."
          done

      # Step 3: Scan Folders for Contents and Missing Files
      - name: Scan Folders for Contents and Missing Files
        run: |
          set -x
          echo "Scanning audio, cover, and json subfolders 1 to 16..."
          shopt -s nocaseglob
          # Initialize output file
          echo "Folder Contents and Missing Files Report" > folder_contents.txt
          echo "Generated on $(date)" >> folder_contents.txt
          echo "" >> folder_contents.txt

          # Define expected counts for subfolders
          declare -A expected_counts=(
            ["1"]=13
            ["2"]=30
            ["3"]=25
            ["4"]=23
            ["5"]=34
            ["6"]=22
            ["7"]=36
            ["8"]=23
            ["9"]=9
            ["10"]=23
            ["11"]=23
            ["12"]=22
            ["13"]=14
            ["14"]=33
            ["15"]=21
            ["16"]=13
          )

          # Process each root folder
          for root in audio cover json; do
            echo "Processing root folder: $root" >> folder_contents.txt
            echo "---------------------" >> folder_contents.txt
            total_found=0
            # Scan subfolders 1 to 16
            for folder_num in {1..16}; do
              folder="$root/$folder_num"
              echo "Scanning $folder..." >> folder_contents.txt
              echo "Subfolder $folder_num:" >> folder_contents.txt
              file_count=0
              file_list=""
              # Define patterns and extensions per root
              if [ "$root" = "audio" ]; then
                patterns=("*.mp3")
                valid_exts="mp3"
              elif [ "$root" = "cover" ]; then
                patterns=("*.jpg" "*.jpeg" "*.png")
                valid_exts="jpg jpeg png"
              else
                patterns=("*.json")
                valid_exts="json"
              fi
              if [ -d "$folder" ]; then
                # List all files for debugging
                echo "All files in $folder:" >> folder_contents.txt
                ls -la "$folder" 2>/dev/null | grep -v '^d' >> folder_contents.txt || echo "No files found." >> folder_contents.txt
                # Count files with valid extensions
                shopt -s nullglob
                for pattern in "${patterns[@]}"; do
                  echo "Checking pattern: $pattern in $folder" >> folder_contents.txt
                  for file in "$folder"/$pattern; do
                    if [ -f "$file" ]; then
                      filename=$(basename "$file")
                      ext="${filename##*.}"
                      # Verify extension
                      valid_ext=false
                      for valid_ext_item in $valid_exts; do
                        if [ "$ext" = "$valid_ext_item" ]; then
                          valid_ext=true
                          break
                        fi
                      done
                      if [ "$valid_ext" = true ]; then
                        echo "Found valid file: $filename (ext: $ext)" >> folder_contents.txt
                        file_list="$file_list $filename"
                        ((file_count++))
                      else
                        echo "Skipping invalid extension file: $filename (ext: $ext)" >> folder_contents.txt
                      fi
                    fi
                  done
                done
                shopt -u nullglob
                echo "Number of files: $file_count (expected ${expected_counts[$folder_num]})" >> folder_contents.txt
                echo "Files: ${file_list:-None}" >> folder_contents.txt
                if [ $file_count -lt ${expected_counts[$folder_num]} ]; then
                  missing_count=$(( ${expected_counts[$folder_num]} - $file_count ))
                  echo "Missing $missing_count files in $folder" >> folder_contents.txt
                elif [ $file_count -gt ${expected_counts[$folder_num]} ]; then
                  extra_count=$(( $file_count - ${expected_counts[$folder_num]} ))
                  echo "Found $extra_count extra files in $folder" >> folder_contents.txt
                else
                  echo "No missing or extra files in $folder" >> folder_contents.txt
                fi
              else
                echo "$folder not found" >> folder_contents.txt
                echo "Number of files: 0 (expected ${expected_counts[$folder_num]})" >> folder_contents.txt
                echo "Files: None" >> folder_contents.txt
                echo "Missing ${expected_counts[$folder_num]} files in $folder" >> folder_contents.txt
              fi
              echo "" >> folder_contents.txt
              total_found=$((total_found + file_count))
            done
            echo "Total files found in $root: $total_found (expected 364)" >> folder_contents.txt
            echo "" >> folder_contents.txt
          done
          shopt -u nocaseglob
          echo "Contents of folder_contents.txt:"
          cat folder_contents.txt

      # Step 4: Configure Git User
      - name: Configure Git User
        run: |
          echo "Configuring Git user..."
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      # Step 5: Commit and Push Changes
      - name: Commit and Push Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Adding folder_contents.txt to git..."
          git add folder_contents.txt
          echo "Git status after add:"
          git status
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            echo "Committing changes..."
            git commit -m "${{ github.event.inputs.commit_message || 'Scan audio, cover, and json subfolders 1 to 16, record contents and missing files' }}"
            echo "Pushing changes..."
            git push origin main
          fi